{"ast":null,"code":"var _jsxFileName = \"/Users/dev-yun/Documents/react-practice/code/01-starting-react/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  // 기본적으로 입력에 대한 변경 이벤트(event.target.value)는 숫자, date 모두 문자열로 받아오기 때문에 ''로 초기화\n  // 유사한 state가 3번 사용되었는데, 이를 객체로 변환하여 사용할 수 있다.\n  // const [enteredTitle, setEnteredTitle] = useState(\"\");\n  // const [enteredAmount, setEnteredAmount] = useState(\"\");\n  // const [enteredDate, setEnteredDate] = useState(\"\");\n  // state를 한번에 관리하는 장점이 있지만, 객체 내부의 하나의 state만 변경되어도 모든 state가 변경된다는 점도 존재한다.\n  // 개발자의 취향에 맞게 선택해서 사용하면 될듯..\n  const [userInput, setUserInput] = useState({\n    enteredTitle: \"\",\n    enteredAmount: \"\",\n    enteredDate: \"\"\n  });\n\n  const titleChangeHandler = event => {\n    // setEnteredTitle(event.target.value);\n    // 만약 titleChangeHandler라서 setUserInput에서 title만 변경한다면 오류가 발생한다.\n    // setState는 병합의 개념이 아니라 새로운 값으로 교체하는 개념이라서 enteredAmount, enteredDate에는 undefined값이 들어가게 된다. (spread로 객체를 복사하여 추가하고, 업데이트 값으로 오버라이딩을 해야함)\n    // setUserInput({\n    //   // 수동으로 기존의 값을 추가해야한다.\n    //   ...userInput,\n    //   enteredTitle: event.target.value,\n    // });\n    // 하지만 위의 코드도 문제가 발생한다. (3개의 함수에서 setUserInput을 업데이트하는데, 이렇게 객체를 통해 한번에 값을 관리할 경우 이전의 상태가 최신 상태가 아닐 수 있다.)\n    // 함수를 통해 객체가 최신의 상태임을 명시하여 사용해야한다.\n    setUserInput(prevState => {\n      return { ...prevState,\n        enteredTitle: event.target.value\n      };\n    });\n  };\n\n  const amountChangeHandler = event => {\n    // setEnteredAmount(event.target.value);\n    setUserInput({ ...userInput,\n      enteredAmount: event.target.value\n    });\n  };\n\n  const dateChangeHandler = event => {\n    // setEnteredDate(event.target.value);\n    setUserInput({ ...userInput,\n      enteredDate: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    action: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2020-01-01\",\n          max: \"2024-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"fOKiQJ0uFtiE+wpCN1+3hpMhKHE=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["useState","ExpenseForm","userInput","setUserInput","enteredTitle","enteredAmount","enteredDate","titleChangeHandler","event","prevState","target","value","amountChangeHandler","dateChangeHandler"],"sources":["/Users/dev-yun/Documents/react-practice/code/01-starting-react/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./ExpenseForm.css\";\n\nconst ExpenseForm = () => {\n  // 기본적으로 입력에 대한 변경 이벤트(event.target.value)는 숫자, date 모두 문자열로 받아오기 때문에 ''로 초기화\n\n  // 유사한 state가 3번 사용되었는데, 이를 객체로 변환하여 사용할 수 있다.\n  // const [enteredTitle, setEnteredTitle] = useState(\"\");\n  // const [enteredAmount, setEnteredAmount] = useState(\"\");\n  // const [enteredDate, setEnteredDate] = useState(\"\");\n\n  // state를 한번에 관리하는 장점이 있지만, 객체 내부의 하나의 state만 변경되어도 모든 state가 변경된다는 점도 존재한다.\n  // 개발자의 취향에 맞게 선택해서 사용하면 될듯..\n  const [userInput, setUserInput] = useState({\n    enteredTitle: \"\",\n    enteredAmount: \"\",\n    enteredDate: \"\",\n  });\n\n  const titleChangeHandler = (event) => {\n    // setEnteredTitle(event.target.value);\n\n    // 만약 titleChangeHandler라서 setUserInput에서 title만 변경한다면 오류가 발생한다.\n    // setState는 병합의 개념이 아니라 새로운 값으로 교체하는 개념이라서 enteredAmount, enteredDate에는 undefined값이 들어가게 된다. (spread로 객체를 복사하여 추가하고, 업데이트 값으로 오버라이딩을 해야함)\n    // setUserInput({\n    //   // 수동으로 기존의 값을 추가해야한다.\n    //   ...userInput,\n    //   enteredTitle: event.target.value,\n    // });\n\n    // 하지만 위의 코드도 문제가 발생한다. (3개의 함수에서 setUserInput을 업데이트하는데, 이렇게 객체를 통해 한번에 값을 관리할 경우 이전의 상태가 최신 상태가 아닐 수 있다.)\n    // 함수를 통해 객체가 최신의 상태임을 명시하여 사용해야한다.\n    setUserInput((prevState) => {\n      return { ...prevState, enteredTitle: event.target.value };\n    });\n  };\n  const amountChangeHandler = (event) => {\n    // setEnteredAmount(event.target.value);\n    setUserInput({\n      ...userInput,\n      enteredAmount: event.target.value,\n    });\n  };\n  const dateChangeHandler = (event) => {\n    // setEnteredDate(event.target.value);\n    setUserInput({\n      ...userInput,\n      enteredDate: event.target.value,\n    });\n  };\n\n  return (\n    <form action=\"\">\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input type=\"text\" onChange={titleChangeHandler} />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2020-01-01\"\n            max=\"2024-12-31\"\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,mBAAP;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC;IACzCI,YAAY,EAAE,EAD2B;IAEzCC,aAAa,EAAE,EAF0B;IAGzCC,WAAW,EAAE;EAH4B,CAAD,CAA1C;;EAMA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;IACpC;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACAL,YAAY,CAAEM,SAAD,IAAe;MAC1B,OAAO,EAAE,GAAGA,SAAL;QAAgBL,YAAY,EAAEI,KAAK,CAACE,MAAN,CAAaC;MAA3C,CAAP;IACD,CAFW,CAAZ;EAGD,CAhBD;;EAiBA,MAAMC,mBAAmB,GAAIJ,KAAD,IAAW;IACrC;IACAL,YAAY,CAAC,EACX,GAAGD,SADQ;MAEXG,aAAa,EAAEG,KAAK,CAACE,MAAN,CAAaC;IAFjB,CAAD,CAAZ;EAID,CAND;;EAOA,MAAME,iBAAiB,GAAIL,KAAD,IAAW;IACnC;IACAL,YAAY,CAAC,EACX,GAAGD,SADQ;MAEXI,WAAW,EAAEE,KAAK,CAACE,MAAN,CAAaC;IAFf,CAAD,CAAZ;EAID,CAND;;EAQA,oBACE;IAAM,MAAM,EAAC,EAAb;IAAA,wBACE;MAAK,SAAS,EAAC,uBAAf;MAAA,wBACE;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAEJ;QAA7B;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAKE;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,QADP;UAEE,GAAG,EAAC,MAFN;UAGE,IAAI,EAAC,MAHP;UAIE,QAAQ,EAAEK;QAJZ;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QALF,eAcE;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,MADP;UAEE,GAAG,EAAC,YAFN;UAGE,GAAG,EAAC,YAHN;UAIE,QAAQ,EAAEC;QAJZ;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAdF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAyBE;MAAK,SAAS,EAAC,sBAAf;MAAA,uBACE;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAzBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA+BD,CA/ED;;GAAMZ,W;;KAAAA,W;AAiFN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}